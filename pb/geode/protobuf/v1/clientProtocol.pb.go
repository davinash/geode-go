//
// Licensed to the Apache Software Foundation (ASF) under one or more contributor license
// agreements. See the NOTICE file distributed with this work for additional information regarding
// copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance with the License. You may obtain a
// copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied. See the License for the specific language governing permissions and limitations under
// the License.

//
// These ProtoBuf files are part of an experimental interface.
// Use this interface at your own risk.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: v1/clientProtocol.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MessageType:
	//	*Message_ErrorResponse
	//	*Message_PutRequest
	//	*Message_PutResponse
	//	*Message_GetRequest
	//	*Message_GetResponse
	//	*Message_PutAllRequest
	//	*Message_PutAllResponse
	//	*Message_GetAllRequest
	//	*Message_GetAllResponse
	//	*Message_RemoveRequest
	//	*Message_RemoveResponse
	//	*Message_GetServerRequest
	//	*Message_GetServerResponse
	//	*Message_GetRegionNamesRequest
	//	*Message_GetRegionNamesResponse
	//	*Message_GetSizeRequest
	//	*Message_GetSizeResponse
	//	*Message_ExecuteFunctionOnRegionRequest
	//	*Message_ExecuteFunctionOnRegionResponse
	//	*Message_ExecuteFunctionOnMemberRequest
	//	*Message_ExecuteFunctionOnMemberResponse
	//	*Message_HandshakeRequest
	//	*Message_HandshakeResponse
	//	*Message_ExecuteFunctionOnGroupRequest
	//	*Message_ExecuteFunctionOnGroupResponse
	//	*Message_OqlQueryRequest
	//	*Message_OqlQueryResponse
	//	*Message_KeySetRequest
	//	*Message_KeySetResponse
	//	*Message_DisconnectClientRequest
	//	*Message_DisconnectClientResponse
	//	*Message_ClearRequest
	//	*Message_ClearResponse
	//	*Message_PutIfAbsentRequest
	//	*Message_PutIfAbsentResponse
	MessageType isMessage_MessageType `protobuf_oneof:"messageType"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_clientProtocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_v1_clientProtocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_v1_clientProtocol_proto_rawDescGZIP(), []int{0}
}

func (m *Message) GetMessageType() isMessage_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (x *Message) GetErrorResponse() *ErrorResponse {
	if x, ok := x.GetMessageType().(*Message_ErrorResponse); ok {
		return x.ErrorResponse
	}
	return nil
}

func (x *Message) GetPutRequest() *PutRequest {
	if x, ok := x.GetMessageType().(*Message_PutRequest); ok {
		return x.PutRequest
	}
	return nil
}

func (x *Message) GetPutResponse() *PutResponse {
	if x, ok := x.GetMessageType().(*Message_PutResponse); ok {
		return x.PutResponse
	}
	return nil
}

func (x *Message) GetGetRequest() *GetRequest {
	if x, ok := x.GetMessageType().(*Message_GetRequest); ok {
		return x.GetRequest
	}
	return nil
}

func (x *Message) GetGetResponse() *GetResponse {
	if x, ok := x.GetMessageType().(*Message_GetResponse); ok {
		return x.GetResponse
	}
	return nil
}

func (x *Message) GetPutAllRequest() *PutAllRequest {
	if x, ok := x.GetMessageType().(*Message_PutAllRequest); ok {
		return x.PutAllRequest
	}
	return nil
}

func (x *Message) GetPutAllResponse() *PutAllResponse {
	if x, ok := x.GetMessageType().(*Message_PutAllResponse); ok {
		return x.PutAllResponse
	}
	return nil
}

func (x *Message) GetGetAllRequest() *GetAllRequest {
	if x, ok := x.GetMessageType().(*Message_GetAllRequest); ok {
		return x.GetAllRequest
	}
	return nil
}

func (x *Message) GetGetAllResponse() *GetAllResponse {
	if x, ok := x.GetMessageType().(*Message_GetAllResponse); ok {
		return x.GetAllResponse
	}
	return nil
}

func (x *Message) GetRemoveRequest() *RemoveRequest {
	if x, ok := x.GetMessageType().(*Message_RemoveRequest); ok {
		return x.RemoveRequest
	}
	return nil
}

func (x *Message) GetRemoveResponse() *RemoveResponse {
	if x, ok := x.GetMessageType().(*Message_RemoveResponse); ok {
		return x.RemoveResponse
	}
	return nil
}

func (x *Message) GetGetServerRequest() *GetServerRequest {
	if x, ok := x.GetMessageType().(*Message_GetServerRequest); ok {
		return x.GetServerRequest
	}
	return nil
}

func (x *Message) GetGetServerResponse() *GetServerResponse {
	if x, ok := x.GetMessageType().(*Message_GetServerResponse); ok {
		return x.GetServerResponse
	}
	return nil
}

func (x *Message) GetGetRegionNamesRequest() *GetRegionNamesRequest {
	if x, ok := x.GetMessageType().(*Message_GetRegionNamesRequest); ok {
		return x.GetRegionNamesRequest
	}
	return nil
}

func (x *Message) GetGetRegionNamesResponse() *GetRegionNamesResponse {
	if x, ok := x.GetMessageType().(*Message_GetRegionNamesResponse); ok {
		return x.GetRegionNamesResponse
	}
	return nil
}

func (x *Message) GetGetSizeRequest() *GetSizeRequest {
	if x, ok := x.GetMessageType().(*Message_GetSizeRequest); ok {
		return x.GetSizeRequest
	}
	return nil
}

func (x *Message) GetGetSizeResponse() *GetSizeResponse {
	if x, ok := x.GetMessageType().(*Message_GetSizeResponse); ok {
		return x.GetSizeResponse
	}
	return nil
}

func (x *Message) GetExecuteFunctionOnRegionRequest() *ExecuteFunctionOnRegionRequest {
	if x, ok := x.GetMessageType().(*Message_ExecuteFunctionOnRegionRequest); ok {
		return x.ExecuteFunctionOnRegionRequest
	}
	return nil
}

func (x *Message) GetExecuteFunctionOnRegionResponse() *ExecuteFunctionOnRegionResponse {
	if x, ok := x.GetMessageType().(*Message_ExecuteFunctionOnRegionResponse); ok {
		return x.ExecuteFunctionOnRegionResponse
	}
	return nil
}

func (x *Message) GetExecuteFunctionOnMemberRequest() *ExecuteFunctionOnMemberRequest {
	if x, ok := x.GetMessageType().(*Message_ExecuteFunctionOnMemberRequest); ok {
		return x.ExecuteFunctionOnMemberRequest
	}
	return nil
}

func (x *Message) GetExecuteFunctionOnMemberResponse() *ExecuteFunctionOnMemberResponse {
	if x, ok := x.GetMessageType().(*Message_ExecuteFunctionOnMemberResponse); ok {
		return x.ExecuteFunctionOnMemberResponse
	}
	return nil
}

func (x *Message) GetHandshakeRequest() *HandshakeRequest {
	if x, ok := x.GetMessageType().(*Message_HandshakeRequest); ok {
		return x.HandshakeRequest
	}
	return nil
}

func (x *Message) GetHandshakeResponse() *HandshakeResponse {
	if x, ok := x.GetMessageType().(*Message_HandshakeResponse); ok {
		return x.HandshakeResponse
	}
	return nil
}

func (x *Message) GetExecuteFunctionOnGroupRequest() *ExecuteFunctionOnGroupRequest {
	if x, ok := x.GetMessageType().(*Message_ExecuteFunctionOnGroupRequest); ok {
		return x.ExecuteFunctionOnGroupRequest
	}
	return nil
}

func (x *Message) GetExecuteFunctionOnGroupResponse() *ExecuteFunctionOnGroupResponse {
	if x, ok := x.GetMessageType().(*Message_ExecuteFunctionOnGroupResponse); ok {
		return x.ExecuteFunctionOnGroupResponse
	}
	return nil
}

func (x *Message) GetOqlQueryRequest() *OQLQueryRequest {
	if x, ok := x.GetMessageType().(*Message_OqlQueryRequest); ok {
		return x.OqlQueryRequest
	}
	return nil
}

func (x *Message) GetOqlQueryResponse() *OQLQueryResponse {
	if x, ok := x.GetMessageType().(*Message_OqlQueryResponse); ok {
		return x.OqlQueryResponse
	}
	return nil
}

func (x *Message) GetKeySetRequest() *KeySetRequest {
	if x, ok := x.GetMessageType().(*Message_KeySetRequest); ok {
		return x.KeySetRequest
	}
	return nil
}

func (x *Message) GetKeySetResponse() *KeySetResponse {
	if x, ok := x.GetMessageType().(*Message_KeySetResponse); ok {
		return x.KeySetResponse
	}
	return nil
}

func (x *Message) GetDisconnectClientRequest() *DisconnectClientRequest {
	if x, ok := x.GetMessageType().(*Message_DisconnectClientRequest); ok {
		return x.DisconnectClientRequest
	}
	return nil
}

func (x *Message) GetDisconnectClientResponse() *DisconnectClientResponse {
	if x, ok := x.GetMessageType().(*Message_DisconnectClientResponse); ok {
		return x.DisconnectClientResponse
	}
	return nil
}

func (x *Message) GetClearRequest() *ClearRequest {
	if x, ok := x.GetMessageType().(*Message_ClearRequest); ok {
		return x.ClearRequest
	}
	return nil
}

func (x *Message) GetClearResponse() *ClearResponse {
	if x, ok := x.GetMessageType().(*Message_ClearResponse); ok {
		return x.ClearResponse
	}
	return nil
}

func (x *Message) GetPutIfAbsentRequest() *PutIfAbsentRequest {
	if x, ok := x.GetMessageType().(*Message_PutIfAbsentRequest); ok {
		return x.PutIfAbsentRequest
	}
	return nil
}

func (x *Message) GetPutIfAbsentResponse() *PutIfAbsentResponse {
	if x, ok := x.GetMessageType().(*Message_PutIfAbsentResponse); ok {
		return x.PutIfAbsentResponse
	}
	return nil
}

type isMessage_MessageType interface {
	isMessage_MessageType()
}

type Message_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,1,opt,name=errorResponse,proto3,oneof"`
}

type Message_PutRequest struct {
	PutRequest *PutRequest `protobuf:"bytes,2,opt,name=putRequest,proto3,oneof"`
}

type Message_PutResponse struct {
	PutResponse *PutResponse `protobuf:"bytes,3,opt,name=putResponse,proto3,oneof"`
}

type Message_GetRequest struct {
	GetRequest *GetRequest `protobuf:"bytes,4,opt,name=getRequest,proto3,oneof"`
}

type Message_GetResponse struct {
	GetResponse *GetResponse `protobuf:"bytes,5,opt,name=getResponse,proto3,oneof"`
}

type Message_PutAllRequest struct {
	PutAllRequest *PutAllRequest `protobuf:"bytes,6,opt,name=putAllRequest,proto3,oneof"`
}

type Message_PutAllResponse struct {
	PutAllResponse *PutAllResponse `protobuf:"bytes,7,opt,name=putAllResponse,proto3,oneof"`
}

type Message_GetAllRequest struct {
	GetAllRequest *GetAllRequest `protobuf:"bytes,8,opt,name=getAllRequest,proto3,oneof"`
}

type Message_GetAllResponse struct {
	GetAllResponse *GetAllResponse `protobuf:"bytes,9,opt,name=getAllResponse,proto3,oneof"`
}

type Message_RemoveRequest struct {
	RemoveRequest *RemoveRequest `protobuf:"bytes,10,opt,name=removeRequest,proto3,oneof"`
}

type Message_RemoveResponse struct {
	RemoveResponse *RemoveResponse `protobuf:"bytes,11,opt,name=removeResponse,proto3,oneof"`
}

type Message_GetServerRequest struct {
	GetServerRequest *GetServerRequest `protobuf:"bytes,12,opt,name=getServerRequest,proto3,oneof"`
}

type Message_GetServerResponse struct {
	GetServerResponse *GetServerResponse `protobuf:"bytes,13,opt,name=getServerResponse,proto3,oneof"`
}

type Message_GetRegionNamesRequest struct {
	GetRegionNamesRequest *GetRegionNamesRequest `protobuf:"bytes,14,opt,name=getRegionNamesRequest,proto3,oneof"`
}

type Message_GetRegionNamesResponse struct {
	GetRegionNamesResponse *GetRegionNamesResponse `protobuf:"bytes,15,opt,name=getRegionNamesResponse,proto3,oneof"`
}

type Message_GetSizeRequest struct {
	GetSizeRequest *GetSizeRequest `protobuf:"bytes,16,opt,name=getSizeRequest,proto3,oneof"`
}

type Message_GetSizeResponse struct {
	GetSizeResponse *GetSizeResponse `protobuf:"bytes,17,opt,name=getSizeResponse,proto3,oneof"`
}

type Message_ExecuteFunctionOnRegionRequest struct {
	ExecuteFunctionOnRegionRequest *ExecuteFunctionOnRegionRequest `protobuf:"bytes,18,opt,name=executeFunctionOnRegionRequest,proto3,oneof"`
}

type Message_ExecuteFunctionOnRegionResponse struct {
	ExecuteFunctionOnRegionResponse *ExecuteFunctionOnRegionResponse `protobuf:"bytes,19,opt,name=executeFunctionOnRegionResponse,proto3,oneof"`
}

type Message_ExecuteFunctionOnMemberRequest struct {
	ExecuteFunctionOnMemberRequest *ExecuteFunctionOnMemberRequest `protobuf:"bytes,20,opt,name=executeFunctionOnMemberRequest,proto3,oneof"`
}

type Message_ExecuteFunctionOnMemberResponse struct {
	ExecuteFunctionOnMemberResponse *ExecuteFunctionOnMemberResponse `protobuf:"bytes,21,opt,name=executeFunctionOnMemberResponse,proto3,oneof"`
}

type Message_HandshakeRequest struct {
	HandshakeRequest *HandshakeRequest `protobuf:"bytes,22,opt,name=handshakeRequest,proto3,oneof"`
}

type Message_HandshakeResponse struct {
	HandshakeResponse *HandshakeResponse `protobuf:"bytes,23,opt,name=handshakeResponse,proto3,oneof"`
}

type Message_ExecuteFunctionOnGroupRequest struct {
	ExecuteFunctionOnGroupRequest *ExecuteFunctionOnGroupRequest `protobuf:"bytes,24,opt,name=executeFunctionOnGroupRequest,proto3,oneof"`
}

type Message_ExecuteFunctionOnGroupResponse struct {
	ExecuteFunctionOnGroupResponse *ExecuteFunctionOnGroupResponse `protobuf:"bytes,25,opt,name=executeFunctionOnGroupResponse,proto3,oneof"`
}

type Message_OqlQueryRequest struct {
	OqlQueryRequest *OQLQueryRequest `protobuf:"bytes,26,opt,name=oqlQueryRequest,proto3,oneof"`
}

type Message_OqlQueryResponse struct {
	OqlQueryResponse *OQLQueryResponse `protobuf:"bytes,27,opt,name=oqlQueryResponse,proto3,oneof"`
}

type Message_KeySetRequest struct {
	KeySetRequest *KeySetRequest `protobuf:"bytes,28,opt,name=keySetRequest,proto3,oneof"`
}

type Message_KeySetResponse struct {
	KeySetResponse *KeySetResponse `protobuf:"bytes,29,opt,name=keySetResponse,proto3,oneof"`
}

type Message_DisconnectClientRequest struct {
	DisconnectClientRequest *DisconnectClientRequest `protobuf:"bytes,30,opt,name=disconnectClientRequest,proto3,oneof"`
}

type Message_DisconnectClientResponse struct {
	DisconnectClientResponse *DisconnectClientResponse `protobuf:"bytes,31,opt,name=disconnectClientResponse,proto3,oneof"`
}

type Message_ClearRequest struct {
	ClearRequest *ClearRequest `protobuf:"bytes,32,opt,name=clearRequest,proto3,oneof"`
}

type Message_ClearResponse struct {
	ClearResponse *ClearResponse `protobuf:"bytes,33,opt,name=clearResponse,proto3,oneof"`
}

type Message_PutIfAbsentRequest struct {
	PutIfAbsentRequest *PutIfAbsentRequest `protobuf:"bytes,34,opt,name=putIfAbsentRequest,proto3,oneof"`
}

type Message_PutIfAbsentResponse struct {
	PutIfAbsentResponse *PutIfAbsentResponse `protobuf:"bytes,35,opt,name=putIfAbsentResponse,proto3,oneof"`
}

func (*Message_ErrorResponse) isMessage_MessageType() {}

func (*Message_PutRequest) isMessage_MessageType() {}

func (*Message_PutResponse) isMessage_MessageType() {}

func (*Message_GetRequest) isMessage_MessageType() {}

func (*Message_GetResponse) isMessage_MessageType() {}

func (*Message_PutAllRequest) isMessage_MessageType() {}

func (*Message_PutAllResponse) isMessage_MessageType() {}

func (*Message_GetAllRequest) isMessage_MessageType() {}

func (*Message_GetAllResponse) isMessage_MessageType() {}

func (*Message_RemoveRequest) isMessage_MessageType() {}

func (*Message_RemoveResponse) isMessage_MessageType() {}

func (*Message_GetServerRequest) isMessage_MessageType() {}

func (*Message_GetServerResponse) isMessage_MessageType() {}

func (*Message_GetRegionNamesRequest) isMessage_MessageType() {}

func (*Message_GetRegionNamesResponse) isMessage_MessageType() {}

func (*Message_GetSizeRequest) isMessage_MessageType() {}

func (*Message_GetSizeResponse) isMessage_MessageType() {}

func (*Message_ExecuteFunctionOnRegionRequest) isMessage_MessageType() {}

func (*Message_ExecuteFunctionOnRegionResponse) isMessage_MessageType() {}

func (*Message_ExecuteFunctionOnMemberRequest) isMessage_MessageType() {}

func (*Message_ExecuteFunctionOnMemberResponse) isMessage_MessageType() {}

func (*Message_HandshakeRequest) isMessage_MessageType() {}

func (*Message_HandshakeResponse) isMessage_MessageType() {}

func (*Message_ExecuteFunctionOnGroupRequest) isMessage_MessageType() {}

func (*Message_ExecuteFunctionOnGroupResponse) isMessage_MessageType() {}

func (*Message_OqlQueryRequest) isMessage_MessageType() {}

func (*Message_OqlQueryResponse) isMessage_MessageType() {}

func (*Message_KeySetRequest) isMessage_MessageType() {}

func (*Message_KeySetResponse) isMessage_MessageType() {}

func (*Message_DisconnectClientRequest) isMessage_MessageType() {}

func (*Message_DisconnectClientResponse) isMessage_MessageType() {}

func (*Message_ClearRequest) isMessage_MessageType() {}

func (*Message_ClearResponse) isMessage_MessageType() {}

func (*Message_PutIfAbsentRequest) isMessage_MessageType() {}

func (*Message_PutIfAbsentResponse) isMessage_MessageType() {}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_clientProtocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_clientProtocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_v1_clientProtocol_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_v1_clientProtocol_proto protoreflect.FileDescriptor

var file_v1_clientProtocol_proto_rawDesc = []byte{
	0x0a, 0x17, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x50, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x41, 0x50, 0x49, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x50, 0x49, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x76, 0x31, 0x2f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x41, 0x50, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x20, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0a,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65,
	0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0d, 0x70, 0x75,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67,
	0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x68, 0x0a, 0x0e, 0x70, 0x75, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x75, 0x74,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0d, 0x67,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x68, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0d,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x10, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a,
	0x11, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7d, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x80, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65,
	0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x0f,
	0x67, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x1e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x1e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x9b, 0x01,
	0x0a, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x10, 0x68,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x11, 0x68,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95,
	0x01, 0x0a, 0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x1e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x1e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x6f, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x51, 0x4c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6f,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e,
	0x0a, 0x10, 0x6f, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x51, 0x4c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x83, 0x01, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67,
	0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x65, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x12, 0x70, 0x75, 0x74,
	0x49, 0x66, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x66, 0x41, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x75, 0x74,
	0x49, 0x66, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x77, 0x0a, 0x13, 0x70, 0x75, 0x74, 0x49, 0x66, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x74, 0x49, 0x66, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x70, 0x75, 0x74, 0x49, 0x66, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x13, 0x5a, 0x11, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_v1_clientProtocol_proto_rawDescOnce sync.Once
	file_v1_clientProtocol_proto_rawDescData = file_v1_clientProtocol_proto_rawDesc
)

func file_v1_clientProtocol_proto_rawDescGZIP() []byte {
	file_v1_clientProtocol_proto_rawDescOnce.Do(func() {
		file_v1_clientProtocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_clientProtocol_proto_rawDescData)
	})
	return file_v1_clientProtocol_proto_rawDescData
}

var file_v1_clientProtocol_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_v1_clientProtocol_proto_goTypes = []interface{}{
	(*Message)(nil),                         // 0: org.apache.geode.internal.protocol.protobuf.v1.Message
	(*ErrorResponse)(nil),                   // 1: org.apache.geode.internal.protocol.protobuf.v1.ErrorResponse
	(*PutRequest)(nil),                      // 2: org.apache.geode.internal.protocol.protobuf.v1.PutRequest
	(*PutResponse)(nil),                     // 3: org.apache.geode.internal.protocol.protobuf.v1.PutResponse
	(*GetRequest)(nil),                      // 4: org.apache.geode.internal.protocol.protobuf.v1.GetRequest
	(*GetResponse)(nil),                     // 5: org.apache.geode.internal.protocol.protobuf.v1.GetResponse
	(*PutAllRequest)(nil),                   // 6: org.apache.geode.internal.protocol.protobuf.v1.PutAllRequest
	(*PutAllResponse)(nil),                  // 7: org.apache.geode.internal.protocol.protobuf.v1.PutAllResponse
	(*GetAllRequest)(nil),                   // 8: org.apache.geode.internal.protocol.protobuf.v1.GetAllRequest
	(*GetAllResponse)(nil),                  // 9: org.apache.geode.internal.protocol.protobuf.v1.GetAllResponse
	(*RemoveRequest)(nil),                   // 10: org.apache.geode.internal.protocol.protobuf.v1.RemoveRequest
	(*RemoveResponse)(nil),                  // 11: org.apache.geode.internal.protocol.protobuf.v1.RemoveResponse
	(*GetServerRequest)(nil),                // 12: org.apache.geode.internal.protocol.protobuf.v1.GetServerRequest
	(*GetServerResponse)(nil),               // 13: org.apache.geode.internal.protocol.protobuf.v1.GetServerResponse
	(*GetRegionNamesRequest)(nil),           // 14: org.apache.geode.internal.protocol.protobuf.v1.GetRegionNamesRequest
	(*GetRegionNamesResponse)(nil),          // 15: org.apache.geode.internal.protocol.protobuf.v1.GetRegionNamesResponse
	(*GetSizeRequest)(nil),                  // 16: org.apache.geode.internal.protocol.protobuf.v1.GetSizeRequest
	(*GetSizeResponse)(nil),                 // 17: org.apache.geode.internal.protocol.protobuf.v1.GetSizeResponse
	(*ExecuteFunctionOnRegionRequest)(nil),  // 18: org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnRegionRequest
	(*ExecuteFunctionOnRegionResponse)(nil), // 19: org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnRegionResponse
	(*ExecuteFunctionOnMemberRequest)(nil),  // 20: org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnMemberRequest
	(*ExecuteFunctionOnMemberResponse)(nil), // 21: org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnMemberResponse
	(*HandshakeRequest)(nil),                // 22: org.apache.geode.internal.protocol.protobuf.v1.HandshakeRequest
	(*HandshakeResponse)(nil),               // 23: org.apache.geode.internal.protocol.protobuf.v1.HandshakeResponse
	(*ExecuteFunctionOnGroupRequest)(nil),   // 24: org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnGroupRequest
	(*ExecuteFunctionOnGroupResponse)(nil),  // 25: org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnGroupResponse
	(*OQLQueryRequest)(nil),                 // 26: org.apache.geode.internal.protocol.protobuf.v1.OQLQueryRequest
	(*OQLQueryResponse)(nil),                // 27: org.apache.geode.internal.protocol.protobuf.v1.OQLQueryResponse
	(*KeySetRequest)(nil),                   // 28: org.apache.geode.internal.protocol.protobuf.v1.KeySetRequest
	(*KeySetResponse)(nil),                  // 29: org.apache.geode.internal.protocol.protobuf.v1.KeySetResponse
	(*DisconnectClientRequest)(nil),         // 30: org.apache.geode.internal.protocol.protobuf.v1.DisconnectClientRequest
	(*DisconnectClientResponse)(nil),        // 31: org.apache.geode.internal.protocol.protobuf.v1.DisconnectClientResponse
	(*ClearRequest)(nil),                    // 32: org.apache.geode.internal.protocol.protobuf.v1.ClearRequest
	(*ClearResponse)(nil),                   // 33: org.apache.geode.internal.protocol.protobuf.v1.ClearResponse
	(*PutIfAbsentRequest)(nil),              // 34: org.apache.geode.internal.protocol.protobuf.v1.PutIfAbsent
	(*PutIfAbsentResponse)(nil),             // 35: org.apache.geode.internal.protocol.protobuf.v1.PutIfAbsentResponse
	(*Error)(nil),                           // 36: org.apache.geode.internal.protocol.protobuf.v1.Error
}
var file_v1_clientProtocol_proto_depIdxs = []int32{
	1,  // 0: org.apache.geode.internal.protocol.protobuf.v1.Message.errorResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.ErrorResponse
	2,  // 1: org.apache.geode.internal.protocol.protobuf.v1.Message.putRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.PutRequest
	3,  // 2: org.apache.geode.internal.protocol.protobuf.v1.Message.putResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.PutResponse
	4,  // 3: org.apache.geode.internal.protocol.protobuf.v1.Message.getRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetRequest
	5,  // 4: org.apache.geode.internal.protocol.protobuf.v1.Message.getResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetResponse
	6,  // 5: org.apache.geode.internal.protocol.protobuf.v1.Message.putAllRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.PutAllRequest
	7,  // 6: org.apache.geode.internal.protocol.protobuf.v1.Message.putAllResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.PutAllResponse
	8,  // 7: org.apache.geode.internal.protocol.protobuf.v1.Message.getAllRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetAllRequest
	9,  // 8: org.apache.geode.internal.protocol.protobuf.v1.Message.getAllResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetAllResponse
	10, // 9: org.apache.geode.internal.protocol.protobuf.v1.Message.removeRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.RemoveRequest
	11, // 10: org.apache.geode.internal.protocol.protobuf.v1.Message.removeResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.RemoveResponse
	12, // 11: org.apache.geode.internal.protocol.protobuf.v1.Message.getServerRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetServerRequest
	13, // 12: org.apache.geode.internal.protocol.protobuf.v1.Message.getServerResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetServerResponse
	14, // 13: org.apache.geode.internal.protocol.protobuf.v1.Message.getRegionNamesRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetRegionNamesRequest
	15, // 14: org.apache.geode.internal.protocol.protobuf.v1.Message.getRegionNamesResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetRegionNamesResponse
	16, // 15: org.apache.geode.internal.protocol.protobuf.v1.Message.getSizeRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetSizeRequest
	17, // 16: org.apache.geode.internal.protocol.protobuf.v1.Message.getSizeResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.GetSizeResponse
	18, // 17: org.apache.geode.internal.protocol.protobuf.v1.Message.executeFunctionOnRegionRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnRegionRequest
	19, // 18: org.apache.geode.internal.protocol.protobuf.v1.Message.executeFunctionOnRegionResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnRegionResponse
	20, // 19: org.apache.geode.internal.protocol.protobuf.v1.Message.executeFunctionOnMemberRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnMemberRequest
	21, // 20: org.apache.geode.internal.protocol.protobuf.v1.Message.executeFunctionOnMemberResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnMemberResponse
	22, // 21: org.apache.geode.internal.protocol.protobuf.v1.Message.handshakeRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.HandshakeRequest
	23, // 22: org.apache.geode.internal.protocol.protobuf.v1.Message.handshakeResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.HandshakeResponse
	24, // 23: org.apache.geode.internal.protocol.protobuf.v1.Message.executeFunctionOnGroupRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnGroupRequest
	25, // 24: org.apache.geode.internal.protocol.protobuf.v1.Message.executeFunctionOnGroupResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.ExecuteFunctionOnGroupResponse
	26, // 25: org.apache.geode.internal.protocol.protobuf.v1.Message.oqlQueryRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.OQLQueryRequest
	27, // 26: org.apache.geode.internal.protocol.protobuf.v1.Message.oqlQueryResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.OQLQueryResponse
	28, // 27: org.apache.geode.internal.protocol.protobuf.v1.Message.keySetRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.KeySetRequest
	29, // 28: org.apache.geode.internal.protocol.protobuf.v1.Message.keySetResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.KeySetResponse
	30, // 29: org.apache.geode.internal.protocol.protobuf.v1.Message.disconnectClientRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.DisconnectClientRequest
	31, // 30: org.apache.geode.internal.protocol.protobuf.v1.Message.disconnectClientResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.DisconnectClientResponse
	32, // 31: org.apache.geode.internal.protocol.protobuf.v1.Message.clearRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.ClearRequest
	33, // 32: org.apache.geode.internal.protocol.protobuf.v1.Message.clearResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.ClearResponse
	34, // 33: org.apache.geode.internal.protocol.protobuf.v1.Message.putIfAbsentRequest:type_name -> org.apache.geode.internal.protocol.protobuf.v1.PutIfAbsent
	35, // 34: org.apache.geode.internal.protocol.protobuf.v1.Message.putIfAbsentResponse:type_name -> org.apache.geode.internal.protocol.protobuf.v1.PutIfAbsentResponse
	36, // 35: org.apache.geode.internal.protocol.protobuf.v1.ErrorResponse.error:type_name -> org.apache.geode.internal.protocol.protobuf.v1.Error
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_v1_clientProtocol_proto_init() }
func file_v1_clientProtocol_proto_init() {
	if File_v1_clientProtocol_proto != nil {
		return
	}
	file_v1_region_API_proto_init()
	file_v1_locator_API_proto_init()
	file_v1_basicTypes_proto_init()
	file_v1_connection_API_proto_init()
	file_v1_function_API_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_clientProtocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_clientProtocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_clientProtocol_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_ErrorResponse)(nil),
		(*Message_PutRequest)(nil),
		(*Message_PutResponse)(nil),
		(*Message_GetRequest)(nil),
		(*Message_GetResponse)(nil),
		(*Message_PutAllRequest)(nil),
		(*Message_PutAllResponse)(nil),
		(*Message_GetAllRequest)(nil),
		(*Message_GetAllResponse)(nil),
		(*Message_RemoveRequest)(nil),
		(*Message_RemoveResponse)(nil),
		(*Message_GetServerRequest)(nil),
		(*Message_GetServerResponse)(nil),
		(*Message_GetRegionNamesRequest)(nil),
		(*Message_GetRegionNamesResponse)(nil),
		(*Message_GetSizeRequest)(nil),
		(*Message_GetSizeResponse)(nil),
		(*Message_ExecuteFunctionOnRegionRequest)(nil),
		(*Message_ExecuteFunctionOnRegionResponse)(nil),
		(*Message_ExecuteFunctionOnMemberRequest)(nil),
		(*Message_ExecuteFunctionOnMemberResponse)(nil),
		(*Message_HandshakeRequest)(nil),
		(*Message_HandshakeResponse)(nil),
		(*Message_ExecuteFunctionOnGroupRequest)(nil),
		(*Message_ExecuteFunctionOnGroupResponse)(nil),
		(*Message_OqlQueryRequest)(nil),
		(*Message_OqlQueryResponse)(nil),
		(*Message_KeySetRequest)(nil),
		(*Message_KeySetResponse)(nil),
		(*Message_DisconnectClientRequest)(nil),
		(*Message_DisconnectClientResponse)(nil),
		(*Message_ClearRequest)(nil),
		(*Message_ClearResponse)(nil),
		(*Message_PutIfAbsentRequest)(nil),
		(*Message_PutIfAbsentResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_clientProtocol_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_clientProtocol_proto_goTypes,
		DependencyIndexes: file_v1_clientProtocol_proto_depIdxs,
		MessageInfos:      file_v1_clientProtocol_proto_msgTypes,
	}.Build()
	File_v1_clientProtocol_proto = out.File
	file_v1_clientProtocol_proto_rawDesc = nil
	file_v1_clientProtocol_proto_goTypes = nil
	file_v1_clientProtocol_proto_depIdxs = nil
}
